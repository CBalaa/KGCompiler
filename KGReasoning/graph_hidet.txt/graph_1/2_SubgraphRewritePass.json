{
  "graphs": [
    {
      "name": "",
      "inputs": [
        {
          "name": "input:0",
          "arguments": [
            {
              "name": "input:0",
              "type": {
                "string": "int64['1', '2']",
                "shape": {
                  "dimensions": [
                    "1",
                    "2"
                  ]
                },
                "dataType": "int64"
              }
            }
          ],
          "visible": true
        },
        {
          "name": "input:1",
          "arguments": [
            {
              "name": "input:1",
              "type": {
                "string": "int64['1', '14505']",
                "shape": {
                  "dimensions": [
                    "1",
                    "14505"
                  ]
                },
                "dataType": "int64"
              }
            }
          ],
          "visible": true
        }
      ],
      "outputs": [
        {
          "name": "output:0",
          "arguments": [
            {
              "name": "30_Concat:0",
              "type": {
                "string": "float32['1', '14505', '400']",
                "shape": {
                  "dimensions": [
                    "1",
                    "14505",
                    "400"
                  ]
                },
                "dataType": "float32"
              }
            }
          ],
          "visible": true
        }
      ],
      "nodes": [
        {
          "name": "0_StridedSlice",
          "type": {
            "name": "StridedSlice",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "input:1",
                  "type": {
                    "string": "int64['1', '14505']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "0_StridedSlice:0",
                  "type": {
                    "string": "int64['1', '14505']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "starts",
              "type": "Sequence[int]",
              "value": "[0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ends",
              "type": "Sequence[Constant]",
              "value": "[1, 14505]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "strides",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: slice",
            "  parameters: ",
            "    data: tensor(int64, [1, 14505])",
            "    out: tensor(int64, [1, 14505])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: int64[1, 14505] where out[v, v_1] = data[v, v_1]",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "1_Squeeze",
          "type": {
            "name": "Squeeze",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "0_StridedSlice:0",
                  "type": {
                    "string": "int64['1', '14505']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "1_Squeeze:0",
                  "type": {
                    "string": "int64['14505']",
                    "shape": {
                      "dimensions": [
                        "14505"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[0]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  parameters: ",
            "    x: tensor(int64, [1, 14505])",
            "    y: tensor(int64, [14505])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: int64[14505] where y[v] = x[0, (v % 14505)]",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_1, v_2] => [v_2])",
            ")"
          ]
        },
        {
          "name": "2_Reshape",
          "type": {
            "name": "Reshape",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "1_Squeeze:0",
                  "type": {
                    "string": "int64['14505']",
                    "shape": {
                      "dimensions": [
                        "14505"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "2_Reshape:0",
                  "type": {
                    "string": "int64['14505']",
                    "shape": {
                      "dimensions": [
                        "14505"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[-1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape",
            "  parameters: ",
            "    x: tensor(int64, [14505])",
            "    y: tensor(int64, [14505])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: int64[14505] where y[v] = x[v]",
            "  attributes: {shape: [14505]}",
            "  inverse_map:",
            "    x: InverseMap([v_1] => [v_1])",
            ")"
          ]
        },
        {
          "name": "3_Take",
          "type": {
            "name": "Take",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:0",
                  "type": {
                    "string": "float32['14505', '400']",
                    "shape": {
                      "dimensions": [
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "2_Reshape:0",
                  "type": {
                    "string": "int64['14505']",
                    "shape": {
                      "dimensions": [
                        "14505"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "3_Take:0",
                  "type": {
                    "string": "float32['14505', '400']",
                    "shape": {
                      "dimensions": [
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: take",
            "  parameters: ",
            "    data: tensor(float32, [14505, 400])",
            "    indices: tensor(int64, [14505])",
            "    output: tensor(float32, [14505, 400])",
            "  inputs: [data, indices]",
            "  outputs: [output]",
            "  computations: ",
            "    output: float32[14505, 400] where output[v, v_1] = data[((indices[v] < 0) ? (indices[v] + 14505) : indices[v]), v_1]",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "4_Reshape",
          "type": {
            "name": "Reshape",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "3_Take:0",
                  "type": {
                    "string": "float32['14505', '400']",
                    "shape": {
                      "dimensions": [
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "4_Reshape:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "shape",
              "type": "Sequence[int]",
              "value": "[1, 14505, -1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: reshape",
            "  parameters: ",
            "    x: tensor(float32, [14505, 400])",
            "    y: tensor(float32, [1, 14505, 400])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[1, 14505, 400] where y[v, v_1, v_2] = x[(((v_2 + (v_1 * 400)) + (v * 5802000)) / 400), (((v_2 + (v_1 * 400)) + (v * 5802000)) % 400)]",
            "  attributes: {shape: [1, 14505, 400]}",
            "  inverse_map:",
            "    x: InverseMap([v_3, v_4] => [((v_4 + (v_3 * 400)) / 5802000), (((v_4 + (v_3 * 400)) / 400) % 14505), ((v_4 + (v_3 * 400)) % 400)])",
            ")"
          ]
        },
        {
          "name": "5_StridedSlice",
          "type": {
            "name": "StridedSlice",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "input:0",
                  "type": {
                    "string": "int64['1', '2']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "5_StridedSlice:0",
                  "type": {
                    "string": "int64['1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "starts",
              "type": "Sequence[int]",
              "value": "[0, 0]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ends",
              "type": "Sequence[Constant]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "strides",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: slice",
            "  parameters: ",
            "    data: tensor(int64, [1, 2])",
            "    out: tensor(int64, [1, 1])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: int64[1, 1] where out[v, v_1] = data[v, v_1]",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "6_Squeeze",
          "type": {
            "name": "Squeeze",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "5_StridedSlice:0",
                  "type": {
                    "string": "int64['1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "6_Squeeze:0",
                  "type": {
                    "string": "int64['1']",
                    "shape": {
                      "dimensions": [
                        "1"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  parameters: ",
            "    x: tensor(int64, [1, 1])",
            "    y: tensor(int64, [1])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: int64[1] where y[v] = x[0, 0]",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_1, v_2] => [v_1])",
            ")"
          ]
        },
        {
          "name": "7_Take",
          "type": {
            "name": "Take",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:0",
                  "type": {
                    "string": "float32['14505', '400']",
                    "shape": {
                      "dimensions": [
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "6_Squeeze:0",
                  "type": {
                    "string": "int64['1']",
                    "shape": {
                      "dimensions": [
                        "1"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "7_Take:0",
                  "type": {
                    "string": "float32['1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: take",
            "  parameters: ",
            "    data: tensor(float32, [14505, 400])",
            "    indices: tensor(int64, [1])",
            "    output: tensor(float32, [1, 400])",
            "  inputs: [data, indices]",
            "  outputs: [output]",
            "  computations: ",
            "    output: float32[1, 400] where output[v, v_1] = data[((indices[v] < 0) ? (indices[v] + 14505) : indices[v]), v_1]",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "8_StridedSlice",
          "type": {
            "name": "StridedSlice",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "input:0",
                  "type": {
                    "string": "int64['1', '2']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "8_StridedSlice:0",
                  "type": {
                    "string": "int64['1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "starts",
              "type": "Sequence[int]",
              "value": "[0, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ends",
              "type": "Sequence[Constant]",
              "value": "[1, 2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "strides",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: slice",
            "  parameters: ",
            "    data: tensor(int64, [1, 2])",
            "    out: tensor(int64, [1, 1])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: int64[1, 1] where out[v, v_1] = data[v, (v_1 + 1)]",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "9_Squeeze",
          "type": {
            "name": "Squeeze",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "8_StridedSlice:0",
                  "type": {
                    "string": "int64['1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "9_Squeeze:0",
                  "type": {
                    "string": "int64['1']",
                    "shape": {
                      "dimensions": [
                        "1"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  parameters: ",
            "    x: tensor(int64, [1, 1])",
            "    y: tensor(int64, [1])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: int64[1] where y[v] = x[0, 0]",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_1, v_2] => [v_1])",
            ")"
          ]
        },
        {
          "name": "10_Take",
          "type": {
            "name": "Take",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:1",
                  "type": {
                    "string": "float32['474', '400']",
                    "shape": {
                      "dimensions": [
                        "474",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "9_Squeeze:0",
                  "type": {
                    "string": "int64['1']",
                    "shape": {
                      "dimensions": [
                        "1"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "10_Take:0",
                  "type": {
                    "string": "float32['1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: take",
            "  parameters: ",
            "    data: tensor(float32, [474, 400])",
            "    indices: tensor(int64, [1])",
            "    output: tensor(float32, [1, 400])",
            "  inputs: [data, indices]",
            "  outputs: [output]",
            "  computations: ",
            "    output: float32[1, 400] where output[v, v_1] = data[((indices[v] < 0) ? (indices[v] + 474) : indices[v]), v_1]",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "11_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "7_Take:0",
                  "type": {
                    "string": "float32['1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "10_Take:0",
                  "type": {
                    "string": "float32['1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "11_Add:0",
                  "type": {
                    "string": "float32['1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 400])",
            "    y: tensor(float32, [1, 400])",
            "    z: tensor(float32, [1, 400])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[1, 400] where z[v, v_1] = (x[0, v_1] + y[0, v_1])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_2, v_3] => [v_2, v_3])",
            "    y: InverseMap([v_4, v_5] => [v_4, v_5])",
            ")"
          ]
        },
        {
          "name": "12_Concat",
          "type": {
            "name": "Concat",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "11_Add:0",
                  "type": {
                    "string": "float32['1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "12_Concat:0",
                  "type": {
                    "string": "float32['1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: concat",
            "  parameters: ",
            "    x0: tensor(float32, [1, 400])",
            "    out: tensor(float32, [1, 400])",
            "  inputs: [x0]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[1, 400] where out[v, v_1] = x0[v, v_1]",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "13_Unsqueeze",
          "type": {
            "name": "Unsqueeze",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "12_Concat:0",
                  "type": {
                    "string": "float32['1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "13_Unsqueeze:0",
                  "type": {
                    "string": "float32['1', '1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  parameters: ",
            "    x: tensor(float32, [1, 400])",
            "    y: tensor(float32, [1, 1, 400])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[1, 1, 400] where y[v, v_1, v_2] = x[0, (v_2 % 400)]",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_3, v_4] => [v_3, 0, v_4])",
            ")"
          ]
        },
        {
          "name": "14_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "4_Reshape:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "13_Unsqueeze:0",
                  "type": {
                    "string": "float32['1', '1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "14_Subtract:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [1, 14505, 400])",
            "    y: tensor(float32, [1, 1, 400])",
            "    z: tensor(float32, [1, 14505, 400])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[1, 14505, 400] where z[v, v_1, v_2] = (x[0, v_1, v_2] - y[0, 0, v_2])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_3, v_4, v_5] => [v_3, v_4, v_5])",
            ")"
          ]
        },
        {
          "name": "15_Abs",
          "type": {
            "name": "Abs",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "14_Subtract:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "15_Abs:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: abs",
            "  parameters: ",
            "    x: tensor(float32, [1, 14505, 400])",
            "    y: tensor(float32, [1, 14505, 400])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[1, 14505, 400] where y[v, v_1, v_2] = ((0.0f <= x[v, v_1, v_2]) ? x[v, v_1, v_2] : (-x[v, v_1, v_2]))",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_3, v_4, v_5] => [v_3, v_4, v_5])",
            ")"
          ]
        },
        {
          "name": "16_StridedSlice",
          "type": {
            "name": "StridedSlice",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "input:0",
                  "type": {
                    "string": "int64['1', '2']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "2"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "16_StridedSlice:0",
                  "type": {
                    "string": "int64['1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "starts",
              "type": "Sequence[int]",
              "value": "[0, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "ends",
              "type": "Sequence[Constant]",
              "value": "[1, 2]",
              "visible": true,
              "description": ""
            },
            {
              "name": "axes",
              "type": "Sequence[int]",
              "value": "[0, 1]",
              "visible": true,
              "description": ""
            },
            {
              "name": "strides",
              "type": "Sequence[int]",
              "value": "[1, 1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: slice",
            "  parameters: ",
            "    data: tensor(int64, [1, 2])",
            "    out: tensor(int64, [1, 1])",
            "  inputs: [data]",
            "  outputs: [out]",
            "  computations: ",
            "    out: int64[1, 1] where out[v, v_1] = data[v, (v_1 + 1)]",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "17_Squeeze",
          "type": {
            "name": "Squeeze",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "16_StridedSlice:0",
                  "type": {
                    "string": "int64['1', '1']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "17_Squeeze:0",
                  "type": {
                    "string": "int64['1']",
                    "shape": {
                      "dimensions": [
                        "1"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  parameters: ",
            "    x: tensor(int64, [1, 1])",
            "    y: tensor(int64, [1])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: int64[1] where y[v] = x[0, 0]",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_1, v_2] => [v_1])",
            ")"
          ]
        },
        {
          "name": "18_Take",
          "type": {
            "name": "Take",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:2",
                  "type": {
                    "string": "float32['474', '400']",
                    "shape": {
                      "dimensions": [
                        "474",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "17_Squeeze:0",
                  "type": {
                    "string": "int64['1']",
                    "shape": {
                      "dimensions": [
                        "1"
                      ]
                    },
                    "dataType": "int64"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "18_Take:0",
                  "type": {
                    "string": "float32['1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: take",
            "  parameters: ",
            "    data: tensor(float32, [474, 400])",
            "    indices: tensor(int64, [1])",
            "    output: tensor(float32, [1, 400])",
            "  inputs: [data, indices]",
            "  outputs: [output]",
            "  computations: ",
            "    output: float32[1, 400] where output[v, v_1] = data[((indices[v] < 0) ? (indices[v] + 474) : indices[v]), v_1]",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "19_Add",
          "type": {
            "name": "Add",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "18_Take:0",
                  "type": {
                    "string": "float32['1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "const:3",
                  "type": {
                    "string": "float32['1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "19_Add:0",
                  "type": {
                    "string": "float32['1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: add",
            "  parameters: ",
            "    x: tensor(float32, [1, 400])",
            "    y: tensor(float32, [1, 400])",
            "    z: tensor(float32, [1, 400])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[1, 400] where z[v, v_1] = (x[0, v_1] + y[0, v_1])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_2, v_3] => [v_2, v_3])",
            "    y: InverseMap([v_4, v_5] => [v_4, v_5])",
            ")"
          ]
        },
        {
          "name": "20_Concat",
          "type": {
            "name": "Concat",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "19_Add:0",
                  "type": {
                    "string": "float32['1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "20_Concat:0",
                  "type": {
                    "string": "float32['1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: concat",
            "  parameters: ",
            "    x0: tensor(float32, [1, 400])",
            "    out: tensor(float32, [1, 400])",
            "  inputs: [x0]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[1, 400] where out[v, v_1] = x0[v, v_1]",
            "  attributes: {}",
            ")"
          ]
        },
        {
          "name": "21_Unsqueeze",
          "type": {
            "name": "Unsqueeze",
            "category": "transform"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "20_Concat:0",
                  "type": {
                    "string": "float32['1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "21_Unsqueeze:0",
                  "type": {
                    "string": "float32['1', '1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "dims",
              "type": "Sequence[int]",
              "value": "[1]",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: rearrange",
            "  parameters: ",
            "    x: tensor(float32, [1, 400])",
            "    y: tensor(float32, [1, 1, 400])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[1, 1, 400] where y[v, v_1, v_2] = x[0, (v_2 % 400)]",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_3, v_4] => [v_3, 0, v_4])",
            ")"
          ]
        },
        {
          "name": "22_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "15_Abs:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "21_Unsqueeze:0",
                  "type": {
                    "string": "float32['1', '1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "22_Subtract:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [1, 14505, 400])",
            "    y: tensor(float32, [1, 1, 400])",
            "    z: tensor(float32, [1, 14505, 400])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[1, 14505, 400] where z[v, v_1, v_2] = (x[0, v_1, v_2] - y[0, 0, v_2])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_3, v_4, v_5] => [v_3, v_4, v_5])",
            ")"
          ]
        },
        {
          "name": "23_Relu",
          "type": {
            "name": "Relu",
            "category": "activation"
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "22_Subtract:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "23_Relu:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: relu",
            "  parameters: ",
            "    x: tensor(float32, [1, 14505, 400])",
            "    y: tensor(float32, [1, 14505, 400])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[1, 14505, 400] where y[v, v_1, v_2] = generic_max(x[v, v_1, v_2], 0.0f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_3, v_4, v_5] => [v_3, v_4, v_5])",
            ")"
          ]
        },
        {
          "name": "24_LpNorm",
          "type": {
            "name": "LpNorm",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "23_Relu:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "24_LpNorm:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "p",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            },
            {
              "name": "eps",
              "type": "float",
              "value": "1e-12",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: lp_norm",
            "  parameters: ",
            "    x: tensor(float32, [1, 14505, 400])",
            "    y: tensor(float32, [1, 14505, 400])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    sum: float32[1, 14505] where sum[v, v_1] = reduce([400], (v_2) => generic_pow(cast(float32, generic_abs(x[v, v_1, v_2])), 2), sum)",
            "    p_norm: float32[1, 14505] where p_norm[v_3, v_4] = generic_pow(sum[v_3, v_4], 1.0f)",
            "    y: float32[1, 14505, 400] where y[v_5, v_6, v_7] = cast(float32, (x[v_5, v_6, v_7] / generic_max(p_norm[v_5, v_6], 1e-12f)))",
            "  attributes: {p: 1, dim: 2, eps: 1e-12}",
            ")"
          ]
        },
        {
          "name": "25_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "const:4",
                  "type": {
                    "string": "float32['1']",
                    "shape": {
                      "dimensions": [
                        "1"
                      ]
                    },
                    "dataType": "float32"
                  },
                  "initializer": {
                    "kind": "Initializer",
                    "value": "<>"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "24_LpNorm:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "25_Subtract:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [1])",
            "    y: tensor(float32, [1, 14505, 400])",
            "    z: tensor(float32, [1, 14505, 400])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[1, 14505, 400] where z[v, v_1, v_2] = (x[0] - y[0, v_1, v_2])",
            "  attributes: {}",
            "  inverse_map:",
            "    y: InverseMap([v_3, v_4, v_5] => [v_3, v_4, v_5])",
            ")"
          ]
        },
        {
          "name": "26_Min",
          "type": {
            "name": "Min",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "15_Abs:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "21_Unsqueeze:0",
                  "type": {
                    "string": "float32['1', '1', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "1",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "26_Min:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: min",
            "  parameters: ",
            "    x0: tensor(float32, [1, 14505, 400])",
            "    x1: tensor(float32, [1, 1, 400])",
            "    out: tensor(float32, [1, 14505, 400])",
            "  inputs: [x0, x1]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[1, 14505, 400] where out[v, v_1, v_2] = generic_min(x0[0, v_1, v_2], x1[0, 0, v_2])",
            "  attributes: {}",
            "  inverse_map:",
            "    x0: InverseMap([v_3, v_4, v_5] => [v_3, v_4, v_5])",
            ")"
          ]
        },
        {
          "name": "27_LpNorm",
          "type": {
            "name": "LpNorm",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "26_Min:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "27_LpNorm:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "p",
              "type": "int",
              "value": "1",
              "visible": true,
              "description": ""
            },
            {
              "name": "dim",
              "type": "int",
              "value": "2",
              "visible": true,
              "description": ""
            },
            {
              "name": "eps",
              "type": "float",
              "value": "1e-12",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: lp_norm",
            "  parameters: ",
            "    x: tensor(float32, [1, 14505, 400])",
            "    y: tensor(float32, [1, 14505, 400])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    sum: float32[1, 14505] where sum[v, v_1] = reduce([400], (v_2) => generic_pow(cast(float32, generic_abs(x[v, v_1, v_2])), 2), sum)",
            "    p_norm: float32[1, 14505] where p_norm[v_3, v_4] = generic_pow(sum[v_3, v_4], 1.0f)",
            "    y: float32[1, 14505, 400] where y[v_5, v_6, v_7] = cast(float32, (x[v_5, v_6, v_7] / generic_max(p_norm[v_5, v_6], 1e-12f)))",
            "  attributes: {p: 1, dim: 2, eps: 1e-12}",
            ")"
          ]
        },
        {
          "name": "28_MultiplyScalar",
          "type": {
            "name": "MultiplyScalar",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "27_LpNorm:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "28_MultiplyScalar:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "scalar",
              "type": "Constant",
              "value": "0.02f",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: muls",
            "  parameters: ",
            "    x: tensor(float32, [1, 14505, 400])",
            "    y: tensor(float32, [1, 14505, 400])",
            "  inputs: [x]",
            "  outputs: [y]",
            "  computations: ",
            "    y: float32[1, 14505, 400] where y[v, v_1, v_2] = (x[v, v_1, v_2] * 0.02f)",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_3, v_4, v_5] => [v_3, v_4, v_5])",
            ")"
          ]
        },
        {
          "name": "29_Subtract",
          "type": {
            "name": "Subtract",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "25_Subtract:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            },
            {
              "name": "1",
              "arguments": [
                {
                  "name": "28_MultiplyScalar:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "29_Subtract:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [],
          "description": [
            "Task(",
            "  name: subtract",
            "  parameters: ",
            "    x: tensor(float32, [1, 14505, 400])",
            "    y: tensor(float32, [1, 14505, 400])",
            "    z: tensor(float32, [1, 14505, 400])",
            "  inputs: [x, y]",
            "  outputs: [z]",
            "  computations: ",
            "    z: float32[1, 14505, 400] where z[v, v_1, v_2] = (x[0, v_1, v_2] - y[0, v_1, v_2])",
            "  attributes: {}",
            "  inverse_map:",
            "    x: InverseMap([v_3, v_4, v_5] => [v_3, v_4, v_5])",
            "    y: InverseMap([v_6, v_7, v_8] => [v_6, v_7, v_8])",
            ")"
          ]
        },
        {
          "name": "30_Concat",
          "type": {
            "name": "Concat",
            "category": null
          },
          "inputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "29_Subtract:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "outputs": [
            {
              "name": "0",
              "arguments": [
                {
                  "name": "30_Concat:0",
                  "type": {
                    "string": "float32['1', '14505', '400']",
                    "shape": {
                      "dimensions": [
                        "1",
                        "14505",
                        "400"
                      ]
                    },
                    "dataType": "float32"
                  }
                }
              ],
              "visible": true
            }
          ],
          "attributes": [
            {
              "name": "axis",
              "type": "int",
              "value": "0",
              "visible": true,
              "description": ""
            }
          ],
          "description": [
            "Task(",
            "  name: concat",
            "  parameters: ",
            "    x0: tensor(float32, [1, 14505, 400])",
            "    out: tensor(float32, [1, 14505, 400])",
            "  inputs: [x0]",
            "  outputs: [out]",
            "  computations: ",
            "    out: float32[1, 14505, 400] where out[v, v_1, v_2] = x0[v, v_1, v_2]",
            "  attributes: {}",
            ")"
          ]
        }
      ]
    }
  ],
  "description": "Converted from FlowGraph",
  "author": "",
  "company": "",
  "license": "",
  "domain": "",
  "source": "Hidet",
  "format": "netron"
}