buf0: SchedulerNode(ComputedBuffer)
buf0.writes = [MemoryDep('buf0', c0, {c0: 5802000})]
buf0.unmet_dependencies = []
buf0.met_dependencies = 
    [   MemoryDep('arg0_1', 400*(tmp0) + c1, {c0: 14505, c1: 400}),
        MemoryDep('arg0_1', 400*(tmp2) + c1, {c0: 14505, c1: 400}),
        MemoryDep('arg1_1', 400*(tmp4) + c1, {c0: 14505, c1: 400}),
        MemoryDep('arg4_1', 0, {}),
        MemoryDep('arg4_1', 1, {}),
        MemoryDep('arg5_1', c0, {c0: 14505})]
buf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]
buf0.group.device = cuda:0
buf0.group.iteration = (5802000, 1)
buf0.sizes = ([14505, 400], [])
class buf0_loop_body:
    var_ranges = {z0: 14505, z1: 400}
    index0 = z0
    index1 = 400*indirect0 + z1
    index2 = 0
    index3 = 400*indirect1 + z1
    index4 = 1
    index5 = 400*indirect2 + z1
    index6 = 400*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg4_1', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg0_1', get_index_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg4_1', get_index_4)
        set_indirect2 = self.set_indirect2(load_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg1_1', get_index_5)
        add = ops.add(load_3, load_5)
        sub = ops.sub(load_1, add)
        abs_1 = ops.abs(sub)
        get_index_6 = self.get_index('index6')
        store = ops.store('buf0', get_index_6, abs_1, None)
        return store


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep('buf1', c0, {c0: 14505})]
buf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 5802000})]
buf1.met_dependencies = 
    [   MemoryDep('arg2_1', 400*(tmp1) + c1, {c0: 14505, c1: 400}),
        MemoryDep('arg4_1', 1, {})]
buf1.users = [NodeUser(node=SchedulerNode(name='buf3'), can_inplace=True, is_weak=False)]
buf1.group.device = cuda:0
buf1.group.iteration = (14505, 400)
buf1.sizes = ([14505], [400])
class buf1_loop_body:
    var_ranges = {z0: 14505, z1: 400}
    index0 = 400*z0 + z1
    index1 = 1
    index2 = 400*indirect0 + z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg2_1', get_index_2)
        sub = ops.sub(load, load_2)
        relu = ops.relu(sub)
        abs_1 = ops.abs(relu)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', abs_1)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf1', get_index_3, reduction)
        return store_reduction


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep('buf2', c0, {c0: 14505})]
buf2.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 5802000})]
buf2.met_dependencies = 
    [   MemoryDep('arg2_1', 400*(tmp1) + c1, {c0: 14505, c1: 400}),
        MemoryDep('arg4_1', 1, {})]
buf2.users = [NodeUser(node=SchedulerNode(name='buf3'), can_inplace=True, is_weak=False)]
buf2.group.device = cuda:0
buf2.group.iteration = (14505, 400)
buf2.sizes = ([14505], [400])
class buf2_loop_body:
    var_ranges = {z0: 14505, z1: 400}
    index0 = 400*z0 + z1
    index1 = 1
    index2 = 400*indirect0 + z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg4_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg2_1', get_index_2)
        minimum = ops.minimum(load, load_2)
        abs_1 = ops.abs(minimum)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', abs_1)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf2', get_index_3, reduction)
        return store_reduction


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = [MemoryDep('buf3', c0, {c0: 14505})]
buf3.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 14505}), MemoryDep('buf2', c0, {c0: 14505})]
buf3.met_dependencies = [MemoryDep('arg3_1', 0, {})]
buf3.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf3.group.device = cuda:0
buf3.group.iteration = (14505, 1)
buf3.sizes = ([14505], [])
class buf3_loop_body:
    var_ranges = {z0: 14505}
    index0 = 0
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg3_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf2', get_index_2)
        constant = ops.constant(0.02, torch.float32)
        mul = ops.mul(load_2, constant)
        sub_1 = ops.sub(sub, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf3', get_index_3, sub_1, None)
        return store


