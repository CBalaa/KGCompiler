buf0: SchedulerNode(ComputedBuffer)
buf0.writes = [MemoryDep('buf0', c0, {c0: 6})]
buf0.unmet_dependencies = []
buf0.met_dependencies = 
    [   MemoryDep('arg1_1', 5, {}),
        MemoryDep('arg1_1', c0 - 1, {c0: 6}),
        MemoryDep('arg1_1', c0, {c0: 6})]
buf0.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf0.group.device = cuda:0
buf0.group.iteration = (6, 1)
buf0.sizes = ([6], [])
class buf0_loop_body:
    var_ranges = {z0: 6}
    index0 = z0
    index1 = 5
    index2 = z0 - 3
    index3 = z0 - 1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(3, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(3, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(6, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock4 = self.masked_subblock4(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock4)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf0', get_index_4, where, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg1_1', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(2, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(2, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock3 = self.masked_subblock3(ge_1, 0.0)
        where = ops.where(lt, masked_subblock2, masked_subblock3)
        return where
    def masked_subblock5(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('arg1_1', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg1_1', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(2, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock5 = self.masked_subblock5(lt, 0.0)
        get_index_2 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(2, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(3, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock6 = self.masked_subblock6(ge_1, 0.0)
        where = ops.where(lt, masked_subblock5, masked_subblock6)
        return where


