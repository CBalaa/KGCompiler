buf0: SchedulerNode(ComputedBuffer)
buf0.writes = [MemoryDep('buf0', c0, {c0: 400})]
buf0.unmet_dependencies = []
buf0.met_dependencies = 
    [   MemoryDep('arg0_1', 400*(tmp0) + c0, {c0: 400}),
        MemoryDep('arg1_1', 400*(tmp2) + c0, {c0: 400}),
        MemoryDep('arg1_1', 400*(tmp5) + c0, {c0: 400}),
        MemoryDep('arg1_1', 400*(tmp8) + c0, {c0: 400}),
        MemoryDep('arg4_1', 0, {}),
        MemoryDep('arg4_1', 1, {}),
        MemoryDep('arg4_1', 2, {}),
        MemoryDep('arg4_1', 3, {})]
buf0.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf0.group.device = cuda:0
buf0.group.iteration = (400, 1)
buf0.sizes = ([400], [])
class buf0_loop_body:
    var_ranges = {z0: 400}
    index0 = 0
    index1 = 400*indirect0 + z0
    index2 = 1
    index3 = 400*indirect1 + z0
    index4 = 2
    index5 = 400*indirect2 + z0
    index6 = 3
    index7 = 400*indirect3 + z0
    index8 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg4_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg4_1', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg1_1', get_index_3)
        add = ops.add(load_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg4_1', get_index_4)
        set_indirect2 = self.set_indirect2(load_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg1_1', get_index_5)
        add_1 = ops.add(add, load_5)
        get_index_6 = self.get_index('index6')
        load_6 = ops.load('arg4_1', get_index_6)
        set_indirect3 = self.set_indirect3(load_6)
        get_index_7 = self.get_index('index7')
        load_7 = ops.load('arg1_1', get_index_7)
        add_2 = ops.add(add_1, load_7)
        get_index_8 = self.get_index('index8')
        store = ops.store('buf0', get_index_8, add_2, None)
        return store


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep('buf1', c0, {c0: 400})]
buf1.unmet_dependencies = []
buf1.met_dependencies = 
    [   MemoryDep('arg2_1', 400*(tmp0) + c0, {c0: 400}),
        MemoryDep('arg2_1', 400*(tmp2) + c0, {c0: 400}),
        MemoryDep('arg2_1', 400*(tmp5) + c0, {c0: 400}),
        MemoryDep('arg4_1', 1, {}),
        MemoryDep('arg4_1', 2, {}),
        MemoryDep('arg4_1', 3, {})]
buf1.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf1.group.device = cuda:0
buf1.group.iteration = (400, 1)
buf1.sizes = ([400], [])
class buf1_loop_body:
    var_ranges = {z0: 400}
    index0 = 1
    index1 = 400*indirect0 + z0
    index2 = 2
    index3 = 400*indirect1 + z0
    index4 = 3
    index5 = 400*indirect2 + z0
    index6 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg4_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg4_1', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg2_1', get_index_3)
        add = ops.add(load_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg4_1', get_index_4)
        set_indirect2 = self.set_indirect2(load_4)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('arg2_1', get_index_5)
        add_1 = ops.add(add, load_5)
        get_index_6 = self.get_index('index6')
        store = ops.store('buf1', get_index_6, add_1, None)
        return store


